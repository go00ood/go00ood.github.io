---
layout: post
title:  "한문 구결 독음"
description: 한자나 구결 포함된 문장을 입력해보세요
date:   2025-07-15 
categories: 구결 구결자보조

---


<!-- 입력창 -->
<textarea id="input-text" placeholder="한자나 구결 포함된 문장을 입력해보세요" oninput="resize(this)"></textarea>

<!-- 출력 박스 전체 -->
<div class="output-wrapper">
  <!-- 제목줄 + 복사버튼 -->
  <div class="output-header">
    <span class="output-title">변환 결과</span>
    <button class="copy-btn" onclick="copyOutput()" aria-label="copy">
      <i class="far fa-clipboard"></i>
      <span class="tooltip">복사되었습니다!</span>
    </button>
  </div>
  <!-- 변환 결과 표시 -->
  <div id="preview"></div>
</div>

<style>
@media (prefers-color-scheme: light) {
  body {
    background-color: #fff;
    color: #111;
  }

  #input-text {
    background-color: #acacacff;
    color: #111;
    border: 1px solid #ccc;
    box-shadow: 0 0 4px rgba(0,0,0,0.25); /* 약간의 윤곽 */
  }

  .output-wrapper {
    background-color: #ffffff;
    border: 1px solid #ddd;
    box-shadow: 0 2px 6px rgba(0,0,0,0.06); /* 카드 느낌 */
  }

  .output-header {
    background-color: #f3f3f3;
    color: #222;
    border-bottom: 1px solid #ddd;
  }

  #preview {
    background-color: #fafafa;
    color: #111;
  }

  .copy-btn {
    color: #666;
  }

  .copy-btn:hover {
    background-color: rgba(0, 0, 0, 0.05);
    color: #000;
  }

  .copy-btn .tooltip {
    background-color: #333;
    color: #fff;
  }
}

/* 입력창 */
#input-text {
  width: 100%;
  max-width: 700px;
  min-height: 2.5em;
  padding: 12px 14px;
  font-size: 1rem;
  border: 1px solid white;
  border-radius: 8px;
  background-color: rgba(255, 255, 255, 0.07);
  color: inherit;
  resize: none;
  box-sizing: border-box;
  line-height: 1.5;
}

/* 출력 전체 래퍼 */
.output-wrapper {
  max-width: 700px;
  margin-top: 1.2em;
  border-radius: 8px;
  overflow: visible; /* ← 수정 */
  position: relative; /* ← 추가 */
  box-shadow: 0 2px 4px rgba(0,0,0,0.15);

}

/* 제목줄 */
.output-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: rgba(255, 255, 255, 0.08);
  padding: 10px 14px;
  font-weight: bold;
  font-size: 1rem;
  color: inherit;
  position: relative;
  border-top-left-radius: 8px;
  border-top-right-radius: 8px;

}

/* 출력 박스 */
#preview {
  background-color: rgba(255, 255, 255, 0.05);
  padding: 14px 16px;
  font-size: 1.05rem;
  white-space: pre-wrap;
  color: inherit;
  line-height: 1.6;
  box-sizing: border-box;
  border-bottom-left-radius: 8px;
  border-bottom-right-radius: 8px;
}

/* 복사 버튼 */
.copy-btn {
  background: none;
  border: none;
  color: #bbb;
  font-size: 1rem;
  cursor: pointer;
  padding: 4px 6px;
  border-radius: 6px;
  position: relative;
}

.copy-btn:hover {
  background-color: rgba(255, 255, 255, 0.1);
  color: #fff;
}

/* 툴팁 */
.copy-btn .tooltip {
  visibility: hidden;
  opacity: 0;
  position: absolute;
  top: -28px;
  right: 0;
  background: #111;
  color: #fff;
  padding: 4px 8px;
  font-size: 0.75rem;
  border-radius: 4px;
  white-space: nowrap;
  transition: opacity 0.3s;
}

.copy-btn.copied .tooltip {
  visibility: visible;
  opacity: 1;
}

/* 병기 스타일 */
small.hanja {
  font-size: 0.85em;
  color: #f98ca2;
  margin-left: 4px;
}
small.gugyeol {
  font-size: 0.85em;
  color: #8cc9ff;
  margin-left: 4px;
}

/* 다크모드 대응 */
@media (prefers-color-scheme: dark) {
  #input-text {
    background-color: rgba(30, 30, 30, 0.4);
    color: #eee;
  }

  .output-header {
    background-color: rgba(255, 255, 255, 0.08);
    color: #eee;
  }

  #preview {
    background-color: rgba(255, 255, 255, 0.04);
    color: #eee;
  }

  .copy-btn {
    color: #aaa;
  }

  .copy-btn:hover {
    color: #fff;
  }
}
</style>

<script>
function resize(textarea) {
  textarea.style.height = 'auto';
  textarea.style.height = textarea.scrollHeight + 'px';
}

(async function () {
  const res = await fetch('/assets/data/hanja_reading.json');
  const hanjaMap = await res.json();

  const input = document.getElementById('input-text');
  const preview = document.getElementById('preview');

  input.addEventListener('input', () => {
    const originalText = input.value;

    let annotated = originalText.replace(/([\u4E00-\u9FFF]+)/g, hanjas => {
      const reading = [...hanjas].map(ch => hanjaMap[ch] || '').join('');
      return reading ? `${hanjas}<small class="hanja">(${reading})</small>` : hanjas;
    });

    annotated = annotated.replace(/([\uF600-\uF8FF])/g, (match, ch, offset, fullText) => {
      const prev = fullText[offset - 1];
      const next = fullText[offset + 1];
      if (/[\uF600-\uF8FF]/.test(prev) || /[\uF600-\uF8FF]/.test(next)) return ch;
      const reading = hanjaMap[ch];
      return reading ? `${ch}<small class="gugyeol">[${reading}]</small>` : ch;
    });

    preview.innerHTML = annotated;
  });

  window.copyOutput = () => {
    const preview = document.getElementById('preview');
    const temp = document.createElement('textarea');
    temp.value = preview.innerText;
    document.body.appendChild(temp);
    temp.select();
    document.execCommand('copy');
    document.body.removeChild(temp);

    const btn = document.querySelector('.copy-btn');
    btn.classList.add('copied');
    setTimeout(() => btn.classList.remove('copied'), 1500);
  };
})();
</script>
